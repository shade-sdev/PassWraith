name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: PassWraith.sln
      Test_Project_Path: your-test-project-path
      Wap_Project_Directory: PasswraithPackaging
      Wap_Project_Path: PasswraithPackaging\PasswraithPackaging.wapproj

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add MSBuild to the PATH
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Create the app package
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Upload the MSIX package
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}/AppPackages

    # Delete all releases and tags
    - name: Delete releases and tags
      run: |
        git tag -l | xargs git tag -d
        git fetch --all --prune --tags

    # Determine the release name based on configuration
    - name: Determine release name
      id: set_release_name
      run: |
        if [ "${{ matrix.configuration }}" == "Debug" ]; then
          echo "Debug v1.0.0"
        else
          echo "Release v1.0.0"
        fi

    # Create a release
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0
        release_name: ${{ steps.set_release_name.outputs.release_name }}
        draft: false
        prerelease: false

    # Upload the MSIX package as a release asset
    - name: Upload release asset
      id: upload_release_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.Wap_Project_Directory }}/AppPackages/PasswraithPackaging_1.0.0.0_Debug_Test\PasswraithPackaging_1.0.0.0_x86_Debug.msixbundle
        asset_name: MSIX Package.msix
        asset_content_type: application/vnd.ms-appx
